module Task15 where

import Data.List (sort, concat)

distance ((sx, sy), (bx, by)) = abs (sx - bx) + abs (sy - by)
row = 2000000
rowDistance (x, y) = abs (y - row)

coverage a@(sensor@(x, y), beacon) =
    let d = distance a
        rd = rowDistance sensor
        diff = d - rd
    in  if  d < rd
        then []
        else [x - diff .. x + diff]

uniq [] = []
uniq [a] = [a]
uniq (x:y:xs)
    | x == y = uniq (y:xs)
    | otherwise = x : uniq (y:xs)

answer1 = length $ uniq $ sort $ concat $ map coverage input

input = [
    ((391282,2038170), (-532461,2166525)),
    ((391282,2038170), (-532461,2166525)),
    ((3042382,3783761), (3113582,3814857)),
    ((3042382,3783761), (3113582,3814857)),
    ((3444090,757238), (2930045,2000000)),
    ((3444090,757238), (2930045,2000000)),
    ((971638,288172), (935006,638195)),
    ((971638,288172), (935006,638195)),
    ((2175844,1879176), (2930045,2000000)),
    ((2175844,1879176), (2930045,2000000)),
    ((3063103,3820576), (3113582,3814857)),
    ((3063103,3820576), (3113582,3814857)),
    ((2591294,3667337), (2768198,3762135)),
    ((2591294,3667337), (2768198,3762135)),
    ((2579773,3989626), (2768198,3762135)),
    ((2579773,3989626), (2768198,3762135)),
    ((2887876,2106773), (2930045,2000000)),
    ((2887876,2106773), (2930045,2000000)),
    ((2808659,3280271), (2768198,3762135)),
    ((2808659,3280271), (2768198,3762135)),
    ((2874212,3897058), (2768198,3762135)),
    ((2874212,3897058), (2768198,3762135)),
    ((720384,134640), (935006,638195)),
    ((720384,134640), (935006,638195)),
    ((489,1241813), (-532461,2166525)),
    ((489,1241813), (-532461,2166525)),
    ((120643,2878973), (227814,3107489)),
    ((120643,2878973), (227814,3107489)),
    ((3990734,2991891), (3924443,3039680)),
    ((3990734,2991891), (3924443,3039680)),
    ((1494086,3030634), (2537630,2793941)),
    ((1494086,3030634), (2537630,2793941)),
    ((1864417,360451), (935006,638195)),
    ((1864417,360451), (935006,638195)),
    ((2974807,3732804), (3113582,3814857)),
    ((2974807,3732804), (3113582,3814857)),
    ((3273340,3998032), (3113582,3814857)),
    ((3273340,3998032), (3113582,3814857)),
    ((1468886,1597081), (935006,638195)),
    ((1468886,1597081), (935006,638195)),
    ((2083016,3743849), (2768198,3762135)),
    ((2083016,3743849), (2768198,3762135)),
    ((3387080,3393862), (3113582,3814857)),
    ((3387080,3393862), (3113582,3814857)),
    ((2959440,2052862), (2930045,2000000)),
    ((2959440,2052862), (2930045,2000000)),
    ((1180804,1112043), (935006,638195)),
    ((1180804,1112043), (935006,638195)),
    ((2829808,2206448), (2930045,2000000)),
    ((2829808,2206448), (2930045,2000000)),
    ((3999024,3114260), (3924443,3039680)),
    ((3999024,3114260), (3924443,3039680)),
    ((540955,3893312), (227814,3107489)),
    ((540955,3893312), (227814,3107489)),
    ((3669058,2350731), (3924443,3039680)),
    ((3669058,2350731), (3924443,3039680)),
    ((2915068,2754266), (2537630,2793941)),
    ((2915068,2754266), (2537630,2793941)),
    ((3507419,2838686), (3924443,3039680)),
    ((3507419,2838686), (3924443,3039680)),
    ((165939,498589), (935006,638195)),
    ((165939,498589), (935006,638195)),
    ((3917917,3792648), (3924443,3039680)),
    ((3917917,3792648), (3924443,3039680)),
    ((40698,3202257), (227814,3107489)),
    ((40698,3202257), (227814,3107489)),
    ((2619948,2439745), (2537630,2793941)),
    ((2619948,2439745), (2537630,2793941))
    ]

input' = [
    ((2,18), (-2,15)),
    ((9,16), (10,16)),
    ((13,2), (15,3)),
    ((12,14), (10,16)),
    ((10,20), (10,16)),
    ((14,17), (10,16)),
    ((8,7), (2,10)),
    ((2,0), (2,10)),
    ((0,11), (2,10)),
    ((20,14), (25,17)),
    ((17,20), (21,22)),
    ((16,7), (15,3)),
    ((14,3), (15,3)),
    ((20,1), (15,3))
    ]

row' = 10
rowDistance' (x, y) = abs (y - row')

coverage' a@(sensor@(x, y), beacon) =
    let d = distance a
        rd = rowDistance' sensor
        diff = d - rd
    in  if  d < rd
        then []
        else [x - diff .. x + diff]

answer' = length $ uniq $ sort $ concat $ map coverage' input'